# Generated by Django 5.2.5 on 2025-09-30 02:20

from django.db import migrations
import secrets
import string


def populate_order_ids(apps, schema_editor):
    """
    Populate existing orders with unique order_ids.
    
    This function generates unique alphanumeric IDs for all existing orders
    that don't already have an order_id assigned.
    """
    Order = apps.get_model('orders', 'Order')
    
    # Character set for ID generation (excluding confusing characters)
    alphabet = string.ascii_uppercase + string.digits
    safe_alphabet = alphabet.replace('0', '').replace('O', '').replace('1', '').replace('I', '')
    
    def generate_unique_id(existing_ids, length=8, prefix='ORD-'):
        """Generate a unique ID that's not in existing_ids set."""
        max_attempts = 50
        for _ in range(max_attempts):
            random_part = ''.join(secrets.choice(safe_alphabet) for _ in range(length))
            order_id = f"{prefix}{random_part}"
            if order_id not in existing_ids:
                existing_ids.add(order_id)
                return order_id
        raise ValueError(f"Unable to generate unique ID after {max_attempts} attempts")
    
    # Get all existing order_ids to avoid duplicates
    existing_ids = set(Order.objects.exclude(order_id__isnull=True).exclude(order_id='').values_list('order_id', flat=True))
    
    # Update orders that don't have order_id
    orders_to_update = Order.objects.filter(order_id__isnull=True) | Order.objects.filter(order_id='')
    
    updated_count = 0
    for order in orders_to_update:
        order.order_id = generate_unique_id(existing_ids)
        order.save(update_fields=['order_id'])
        updated_count += 1
    
    # Migration output - acceptable for data migrations to show progress
    if updated_count > 0:
        print(f"âœ… Populated {updated_count} orders with unique IDs")


def reverse_populate_order_ids(apps, schema_editor):
    """
    Reverse migration: Clear order_ids for all orders.
    
    This allows the migration to be reversed if needed.
    """
    Order = apps.get_model('orders', 'Order')
    cleared_count = Order.objects.all().update(order_id=None)
    # Reverse migration completed - removed print for production readiness


class Migration(migrations.Migration):

    dependencies = [
        ('orders', '0013_add_order_id_field_step1'),
    ]

    operations = [
        migrations.RunPython(
            populate_order_ids,
            reverse_populate_order_ids,
            elidable=True,  # This migration can be optimized away if no data exists
        ),
    ]
